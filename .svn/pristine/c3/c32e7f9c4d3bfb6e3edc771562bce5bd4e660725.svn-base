define(['marionette',
    'app/model/Event',
    'app/model/Market',
    'common/util/DateTimeUtil',
    'common/util/CollectionUtil'
],
        function(Marionette, Event, Market, dateTimeUtil, collectionUtil) {

            return Marionette.Controller.extend({

                dependencies: 'schedule=eventScheduleModel, oddsFactory, commands, vent',


                /**
                 * @param options
                 */
                ready: function(options) {
                    _.bindAll(this,'onSportScheduleSuccess', 'onIncidentChange',
                        'onEventPropertyChange','onMarketPropertyChange');

                    this.vent.bind('event:propertyChange', this.onEventPropertyChange);
                    this.vent.bind('market:propertyChange', this.onMarketPropertyChange);
                    this.vent.bind('incidents:change', this.onIncidentChange);
                                        
                    this.schedule.on("change:inplay", this.onModelInplayChange, this);
                    this.schedule.on("change:prematch", this.onModelPrematchChange, this);
                    this.schedule.on("change:participants", this.onModelParticipantsChange, this);
                    this.schedule.on("change:competitions", this.onModelCompetitionsChange, this);
                    this.schedule.on("change:coupons", this.onModelCouponsChange, this);
                },


                /**
                 * @param changedObj
                 */
                onEventPropertyChange: function(changedObj) {
                    var changed = changedObj.changed;
                    var eventId = changedObj.id;

                    var eventEl = 'event-schedule-market-' + eventId;
                    var elementToBeUpdated = $('#'+eventEl);
                    if(changed.state == "SUSPENDED")
                        elementToBeUpdated.removeClass("disabled").addClass("disabled");
                    else if(!_.has(changed, "displayed"))
                        elementToBeUpdated.removeClass("disabled");

                    if(_.has(changed, "displayed")) {
                        this.rebuildTemplate();
                        this.trigger("onEventPropertyChange", changedObj);
                    }
                    else {
                        this.trigger("onEventPropertyChange", changedObj);
                    }
                },

                onMarketPropertyChange: function(changedObj) {
                    var changed = changedObj.changed;
                    var eventId = changedObj.eventId;
                    var marketId = changedObj.id;

                    var marketEl = 'event-schedule-market-'+marketId;
                    var elementToBeUpdated = $('#'+marketEl);

                    if(changed.state == "SUSPENDED")
                        elementToBeUpdated.removeClass("disabled").addClass("disabled");
                    else if(!_.has(changed, "displayed"))
                        elementToBeUpdated.removeClass("disabled");

                    if(_.has(changed, "displayed")) {
                        this.rebuildTemplate();
                        this.trigger("onEventPropertyChange", changedObj);
                    }
                    else {
                        this.trigger("onEventPropertyChange", changedObj);
                    }
                },
                
                onModelCouponsChange: function(event) {
                    var coupons = event.attributes.coupons;
                    this.trigger("onCouponsDataComplate", coupons);
                },
                
                onModelCompetitionsChange: function(event) {
                    var comps = event.attributes.competitions;
                    this.trigger("onCompetitionsDataComplate", comps);
                },
                
                onModelInplayChange: function(event) {
                    var inplayEvents = event.attributes.inplay;
                    this.trigger("onInplayDataComplate", inplayEvents);
                },
                
                onModelPrematchChange: function(event) {
                    console.log('onPrematch change');
                },
                
                onIncidentChange: function(incident) {
                    //Added here in the PM for validation and local dispatch to view. See _changed attribute.)
                    if (incident.attributes.type != 'PeriodStart') {
                        this.trigger("onInplayIncidentChange", incident);   
                    }
                },
                
                onModelParticipantsChange: function(event) {
                    //Add validation to check id the event is in the schedule perhaps?
                    //FIXME: Inefficient, this should be available in the template.
                    //if ( event.attributes.inplay === true ) {
                        this.trigger("onParticipantChange", event);   
                    //}
                },
                

                getData: function(options) {
                    var sport = options.sport;
                    var locale = App.globals.locale;
                    this.options = _.extend(this.options, options);
//                    this.commands.execute('command:getKeyMarketsForSport', sport);

//                    this.commands.execute('command:getSportSchedule', sport, 6, locale)
//                            .done(this.onSportScheduleSuccess)
//                            .fail(this.onSportScheduleFailure);

                    this.buildEventScheduleForView(this.schedule.getPrematchAndInplay());
                    this.updateView();
                },
                
                onSportScheduleSuccess: function(data, textStatus, jqXHR) {
                    this.buildEventScheduleForView(this.schedule.getPrematchAndInplay());
                    this.updateView();
                },
                
                onSportScheduleFailure: function(data, textStatus, jqXHR) {
                    //Add logic for no data returned.
                },
                
                updateView: function() {
                    this.trigger("onDataComplete", this.schedule);
                    this.trigger("onInplayDataComplate", this.schedule.getInplay());
                },
                
                buildEventScheduleForView: function(schedule) {
                    var displaySchedule = {};
                    var scope = this;

                    for (var i = 0; i < schedule.length; i++) {
                        var event = schedule[i];
                        var eventTime = new Date(event.get('eventTime'));
                        if (this.options) {
                            if (eventTime < this.options.eventStart
                                    || eventTime > this.options.eventEnd) {
                                continue;
                            }
                        }

                        if(event.attributes.displayed == false)
                            continue;

                        var groupingDay = dateTimeUtil.groupingDayName(eventTime);
                        event.displayTime = dateTimeUtil.formatHMMFromDate(eventTime);

                        var group = displaySchedule[groupingDay];

                        if (!group) {
                            group = {};
                            group.marketsCount = 0;
                            group.events = [];
                            displaySchedule[groupingDay] = group;
                        }

                        group.marketsCount = group.marketsCount + event.attributes.numMarkets;
                        group.events.push(event);
                    }

                    this.schedule.setGroupedEvents(displaySchedule);
                },

                rebuildTemplate: function() {
                    this.buildEventScheduleForView(this.schedule.getPrematchAndInplay());
                    this.updateView();
                }

            });
        });


