define(['marionette',
        'app/model/Incidents',
        'common/command/subscriptions/SubscriptionCommand'
],
        function(Marionette, Incidents, Subscriptions) {

            return Marionette.Controller.extend({
                dependencies: 'socket=socketService, eventScheduleModel, eventDetailsModel, commands, vent',
                incidentEventXref:[],
                eventDetailsSubscription:[],
                eventScheduleSubscription:null,
                
                ready: function(options) {
                    _.bindAll(this,'onLoginSuccess','onPublicLogin');
                        
                    this.eventScheduleModel.on("change:inplay", this.onInplayScheduleChange, this);
                    this.eventScheduleModel.on("change:prematch", this.onPrematchScheduleChange, this);
                    this.eventScheduleModel.on("updateComplete", this.onScheduleUpdateComplete, this);
                    
                    this.eventDetailsModel.on("change:eventDetails", this.onEventDetailsUpdate, this);
                    
                    this.socket.on("websocket:eventTradingState", this.onEventTradingStateChange, this);
                    this.socket.on("websocket:incidents", this.onIncidentsChange, this);
                    this.socket.on("websocket:event", this.onEventChange, this);
                    this.socket.on("websocket:subscribeResponse", this.onSubscribeResponse, this);
                    this.socket.on("websocket:scheduleAmendment", this.onScheduleAmendmentChange, this);
                    
                    this.vent.bind('session:loggedin', this.onLoginSuccess);
                    this.vent.bind('session:publicLogin', this.onPublicLogin);
                },
                
                onLoginSuccess: function(event) {
                    this.commands.execute('command:getPriceAdjustment');
                },
                
                onPublicLogin: function(event) {
                    this.commands.execute('command:getRootLadder');
                },
                
                onInplayScheduleChange: function(event) {
                    var sportCodes = event.attributes.sportCodes;
                    this.eventScheduleSubscription = sportCodes;
                    
                    if (_.has(event.attributes, 'inplay')) {
                        for (var i = 0; i < event.attributes.inplay.length; i++) {
                            var eventObj = event.attributes.inplay[i];
                            this.eventDetailsSubscription.push(eventObj.id);
                        }
                    }
                },
                
                onPrematchScheduleChange: function(event) {
                    var sportCodes = event.attributes.sportCodes;
                    this.eventScheduleSubscription = sportCodes;
                    
                    if (_.has(event.attributes, 'prematch')) {
                        for (var i = 0; i < event.attributes.prematch.length; i++) {
                            var eventObj = event.attributes.prematch[i];
                            this.eventDetailsSubscription.push(eventObj.id);
                        }
                    }
                },
                
                subscribeToScheduleData: function(eventArray) {
                    var sportCodes = this.eventScheduleModel.attributes.sportCodes;
                    this.eventScheduleSubscription = sportCodes;
                    for (var i = 0; i < eventArray.length; i++) {
                        var eventObj = eventArray[i];
                        this.eventDetailsSubscription.push(eventObj.id);
                    }
                },
                
                
                onScheduleUpdateComplete: function(event) {
                    //Once the command is complete and we have data subscribe
                    this.eventDetailsSubscription = [];
                    this.subscribeToScheduleData(this.eventScheduleModel.getPrematch());
                    this.subscribeToScheduleData(this.eventScheduleModel.getInplay());
                    this.subscribeToKeyMarketsAndSchedule();
                },
                
                subscribeToKeyMarketsAndSchedule: function() {
                    if (this.eventDetailsSubscription.length > 0) {
                        var eventsArray = _.union(this.eventDetailsSubscription);
                        var keyValues='';
                        var keyTypes = this.eventScheduleModel.attributes.keyMarketTypes;
                        
                        for (key in keyTypes) {
                            keyValues += keyTypes[key];
                        }

                        this.commands.execute('command:subscribe:markets', this.eventScheduleSubscription, eventsArray.join(','), keyValues);
                        
//                        this.socket.subscribeToKeyMarketsAndSchedule(this.eventScheduleSubscription, eventsArray.join(','),keyValues);
                    } else {
                        var sport = App.globals.sport;
//                        this.socket.subscribeToSchedule(sport);

                        this.commands.execute('command:subscribe:schedule', sport);
                    }
                },
                
                //Websocket push messages
                onEventTradingStateChange: function(data) {
                    if (_.has(data, 'prices')) {
                        this.parseEventTradingState(data);
                    }
                },
                
                //Websocket push messages
                onIncidentsChange: function(data) {
                    var incidents = data.new.incident;
                    var eventId = data.id;
                    this.parseIncidents(eventId,incidents);
                },
                
                //Websocket push messages
                onEventChange: function(data) {
                    if (_.has(data, 'id')) {
                        var event = this.eventScheduleModel.findEventById(data.id);
                        if (event) {
                            this.listenToOnce(event,"change", this.onEventPropertyChange);
                            event.populate(data);
                        }
                    }
                },
                
                onEventPropertyChange: function(event) {
                    //FIXME CREATE OBJECT FOR THIS.
                    var eventChangeObj = {};
                    eventChangeObj.id = event.attributes.id;
                    eventChangeObj.changed = event.changed;
                    
                    this.vent.trigger('event:propertyChange', eventChangeObj);
                },
                
                onSubscribeResponse: function(data) {
                    var match = data.match;
                    for (var i=0; i< match.length; i++) {
                        var matchObj = match[i];
                        if (_.has(matchObj, 'matchDetails')) {
                            this.parseMatchDetails(matchObj.matchDetails);
                        }  
                        if (_.has(matchObj, 'incidents')) {
                            var incidents = matchObj.incidents.new;
                            var eventId = matchObj.incidents.id;
                            if (incidents && eventId) {
                                this.parseIncidents(eventId, incidents.incident);
                            }
                        }
                        if (_.has(matchObj, 'eventTradingState')) {
                            var eventTradingState = matchObj.eventTradingState;
                            if (eventTradingState) {
                                this.parseEventTradingState(eventTradingState);
                            }
                        }
                    }
                },
                
                parseEventTradingState: function(eventTradingState) {
                    var event = this.eventScheduleModel.findEventById(eventTradingState.id);
                    if (event) {
                        event.populateFromEventTradingState(eventTradingState);
                    }
                },
                
                parseIncidents: function(eventId, incidents) {
                    var incidentModel = this.getIncidentsForEvent(eventId);
                    this.listenToOnce(incidentModel,"change:inplayAttributes", this.onIncidentPropertyChange);
                    
                    for (var i=0; i< incidents.length; i++) {
                        incidentModel.populate(incidents[i]);
                    }

                    // consolidates all incident updates into one chronologically
                    // incremented object, then sets on the model, in order to
                    // prevent events being fired for each incident as they're added
//                    incidentModel.consolidate(incidents);
                },
                
                onIncidentPropertyChange: function(incidentModel) {
                    this.vent.trigger('incidents:change', incidentModel);
                },
                
                getIncidentsForEvent: function(eventId) {
                    if (_.has(this.incidentEventXref, eventId)) {
                        return this.incidentEventXref[eventId];
                    } 
                    
                    var incidentModel = new Incidents(eventId);
                    this.incidentEventXref[eventId] = incidentModel; 
                    return this.incidentEventXref[eventId];
                },
                
                onEventDetailsUpdate: function(detailsModel) {
                    var details = detailsModel.attributes.eventDetails;
                    var eventScheduleEvent = this.eventScheduleModel.findEventById(details.id);
                    if ( _.isUndefined(eventScheduleEvent) ) {
                        //doesn't exist in the schedule.
                    }
                    else {
                        var participants = [{name:eventScheduleEvent.getParticipantA()},{name:eventScheduleEvent.getParticipantB()}];
                        detailsModel.setParticipants(participants);
                    }
                },
                
                parseMatchDetails: function(matchDetails) {
                    if (_.has(matchDetails, 'participants')) {
                        var eventId = matchDetails.matchId;
                        var participantArray = matchDetails.participants.participant;
                        this.eventScheduleModel.setParticipants(eventId,participantArray);
                    }
                },
                
                onScheduleAmendmentChange: function(data) {
                    var scope = this;
                    if (data) {
                        var schedule = data.sport;
                        if (_.isArray(schedule.noLongerPrematch.event)) {
                            _.each(schedule.noLongerPrematch.event, function(eventObj){
                                scope.eventScheduleModel.removeFromPrematch(eventObj);
                            });   
                        }
                        if (_.isArray(schedule.noLongerInplay.event)) {
                            _.each(schedule.noLongerInplay.event, function(eventObj){
                                scope.eventScheduleModel.removeFromInplay(eventObj);
                            });
                        }
                        if (_.isArray(schedule.newInplay.event)) {
                            _.each(schedule.newInplay.event, function(eventObj){
                                scope.eventScheduleModel.addEventToInplay(eventObj);
                            });
                        }
                        if (_.isArray(schedule.newPrematch.event)) {
                            _.each(schedule.newPrematch.event, function(eventObj){
                                scope.eventScheduleModel.addEventToPrematch(eventObj);
                            });
                        }
                    }
                }
                
            });
        });


